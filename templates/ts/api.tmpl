import { API, ID } from "./types.ts";

type Response<T> = {
  code: number;
  status: "success" | "error";
  error?: string;
  data?: T;
};

export class Entcho {
  private readonly url: string;
  constructor(url: string) {
    this.url = url.replace(/\/+$/, "");
  }

  async find<T extends keyof API>(resource: T, id: ID): Promise<Response<API[T]["entity"]>> {
    const url = `${this.url}/${String(resource)}/${id}`;
    const response = await fetch(url);
    return response.json();
  }

  async query<T extends keyof API>(
    resource: T,
    query: API[T]["queryInput"] = {}
  ): Promise<Response<Array<API[T]["entity"]>>> {
    const url = `${this.url}/${String(resource)}/?query=${JSON.stringify(query)}`;
    console.log(url);
    const response = await fetch(url);
    return response.json();
  }

  async create<T extends keyof API>(
    resource: T,
    input: API[T]["createInput"]
  ): Promise<Response<API[T]["entity"]>> {
    const url = `${this.url}/${String(resource)}/`;
    const headers = { "content-type": "application/json" };
    const body = JSON.stringify(input);
    const response = await fetch(url, { method: "POST", headers, body });
    return response.json();
  }

  async createBulk<T extends keyof API>(
    resource: T,
    input: API[T]["createInput"][]
  ): Promise<Response<API[T]["entity"][]>> {
    const url = `${this.url}/${String(resource)}/bulk`;
    const headers = { "content-type": "application/json" };
    const body = JSON.stringify(input);
    const response = await fetch(url, { method: "POST", headers, body });
    return response.json();
  }

  async update<T extends keyof API>(
    resource: T,
    id: ID,
    input: API[T]["updateInput"]
  ): Promise<Response<API[T]["entity"]>> {
    const url = `${this.url}/${String(resource)}/${id}`;
    const headers = { "content-type": "application/json" };
    const body = JSON.stringify(input);
    const response = await fetch(url, { method: "PATCH", headers, body });
    return response.json();
  }

  async updateMany<T extends keyof API>(
    resource: T,
    input: API[T]["updateInput"],
    where?: API[T]["whereInput"]
  ): Promise<Response<undefined>> {
    const url = `${this.url}/${String(resource)}/${where ? `?${JSON.stringify(where)}` : ""}`;
    const body = JSON.stringify(input);
    const headers = { "content-type": "application/json" };
    const response = await fetch(url, { method: "PATCH", headers, body });
    return response.json();
  }

  async delete<T extends keyof API>(resource: T, id: ID): Promise<Response<undefined>> {
    const url = `${this.url}/${String(resource)}/${id}`;
    const response = await fetch(url, { method: "DELETE" });
    return response.json();
  }

  async deleteMany<T extends keyof API>(
    resource: T,
    where?: API[T]["whereInput"]
  ): Promise<Response<undefined>> {
    const url = `${this.url}/${String(resource)}/${where ? `?${JSON.stringify(where)}` : ""}`;
    const response = await fetch(url, { method: "DELETE" });
    return response.json();
  }
}
